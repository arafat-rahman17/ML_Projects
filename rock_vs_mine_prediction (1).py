# -*- coding: utf-8 -*-
"""Rock vs Mine Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rXmaoxKUlpMNZyefyTHSfDX9J-3yotnY

Importing The Dependencies
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

"""Data Collection and Data Processing

"""

#loading the daaset to a pandas Dataframe
soner_data = pd.read_csv('/content/sonar data.csv', header=None)

soner_data.head()

#Number of rows and columns
soner_data.shape

soner_data.describe()

soner_data[60].value_counts()

"""M----> Mine
R _----->Rock
"""

soner_data.groupby(60).mean()

#separating data and Labels
X = soner_data.drop(columns=60, axis=1)
Y = soner_data[60]
print(X)
print(Y)

"""Training and Test data

"""

X_train ,X_test,Y_train,Y_test = train_test_split(X,Y,test_size=0.1,stratify=Y,random_state=1)

print(X.shape,X_train.shape,X_test.shape)

print(X_train)
print(Y_train)

"""Model Training --->Logistic Regression"""

model= LogisticRegression()

#training the logistic Regereeddion model with training data
model.fit(X_train,Y_train)

#accuracy on the trainging data
X_tain_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(X_tain_prediction,Y_train)

print('Accuracy on training data :',training_data_accuracy)

#accuracy on test data
X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction,Y_test)

print('Accuracy on test data :',test_data_accuracy)

"""Making Predictive System"""

input_data = (0.0249,0.0119,0.0277,0.0760,0.1218,0.1538,0.1192,0.1229,0.2119,0.2531,0.2855,0.2961,0.3341,0.4287,0.5205,0.6087,0.7236,0.7577,0.7726,0.8098,0.8995,0.9247,0.9365,0.9853,0.9776,1.0000,0.9896,0.9076,0.7306,0.5758,0.4469,0.3719,0.2079,0.0955,0.0488,0.1406,0.2554,0.2054,0.1614,0.2232,0.1773,0.2293,0.2521,0.1464,0.0673,0.0965,0.1492,0.1128,0.0463,0.0193,0.0140,0.0027,0.0068,0.0150,0.0012,0.0133,0.0048,0.0244,0.0077,0.0074)
#Changing the input data to a numpy array
input_data_as_numpy_array = np.asarray(input_data)

#reshape the np array as we are predicting for one instance
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)
prediction = model.predict(input_data_reshaped)
print(prediction)

if(prediction[0]=='R'):
  print('The object is a Rock')
else:
  print('The object is a Mine')